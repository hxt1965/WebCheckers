package com.webcheckers.appl;


import com.webcheckers.model.BoardView;
import com.webcheckers.model.GameView;
import com.webcheckers.model.Player;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Logger;

/**
 * @author <a href ='mailto:jrv@se.rit.edu'>Paul Woods</a>
 */
public class GameCenter {

    private static final Logger LOG = Logger.getLogger(GameCenter.class.getName());

    public enum ValidUsername {TAKEN, INVALID, FREE}
    //
    // Constants
    //
    static final String LOG_IN_SUCCESSFUL = "Log-in Successful!";
    static final String USER_NAME_TAKEN = "That username is already taken. Please try a new name!";
    static final String NOT_A_VALID_INPUT = "Please enter valid alphanumeric characters.";
    static final String SIGN_OUT = "%s has successfully left the game.";

    // Output strings made public for unit test access

    //
    // Attributes
    //

    private ArrayList<Player> currentUsers;
    private ValidUsername lastUser = null;
    private ArrayList<GameView> gameViews;
    private HashMap games;



    //
    // Constructors
    //

    public GameCenter(){
        this.currentUsers = new ArrayList<>();
        this.gameViews = new ArrayList<>();
        this.games = new HashMap<>();
    }
    //
    // Public methods
    //

    /**
     * Checks validity of username, returns message stating whether log-in was successful or not. Sets validity.
     * @param user - username to check.
     * @return Message whether successful or not.
     */
    public synchronized String getUserMsg(String user){
        LOG.fine("Beginning getUserMsg");
        for (Player x:this.currentUsers
             ) {
            LOG.fine(x.getName());
            if(x.getName().equals(user)){
                this.lastUser = ValidUsername.TAKEN;
                return USER_NAME_TAKEN;
            }
        }
        if(this.checkValid(user)){
            LOG.fine("user.isValid.");
            this.lastUser = ValidUsername.INVALID;
            return NOT_A_VALID_INPUT;
        }
        else{
            LOG.fine("Made it to else.");
            this.lastUser = ValidUsername.FREE;
            this.currentUsers.add(newPlayer(user));
            return LOG_IN_SUCCESSFUL;
        }
    }
    /**
     * Checks to see if the username can be used. If valid, adds it to the list.
     * @return Boolean value, true if successfully logged in, false if invalid.
     */
    public synchronized ValidUsername isValid(){
        return this.lastUser;
    }

    /**
     * Checks to see if the username is valid.
     * @param user - username to be checked.
     * @return boolean value, true if valid, false if not.
     */
    public boolean checkValid(String user){
        for(int x = 0; x < user.length(); x++) {
            LOG.fine(String.format("This letter is: %c. Girth is: %d", user.charAt(x), user.length()));
            if(!Character.isAlphabetic(user.charAt(x)) && !Character.isDigit(user.charAt(x))){
                return true;
            }
        }
        return false;
    }

    /**
     * Gets the total number of users that are actively logged in.
     * @return integer with the number of users logged in.
     */
    public synchronized int getNumUsers(){
        return this.currentUsers.size();
    }


    /**
     * Gets list of usernames of those that are actively logged in.
     * @return List of usernames of those that are currently logged in.
     */
    public synchronized ArrayList<Player> getUserNames(){
        return this.currentUsers;
    }

    /**
     * Get a new PlayerServices object to provide client-specific services to
     * to the client who just connected to this application.
     * @return a new PlayerServices
     */
    public Player newPlayer(String name){
        LOG.fine("New Player instance created.");
        return new Player(this, name);
    }

    /**
     * Creates a new Checkers game.
     * @return A new checkers game.
     */


    public Player getUser(String user){
        for (Player x:this.currentUsers) {
            if(x.getName().equals(user)){
                return x;
            }
        }
        return null;
    }

    public String removeUser(Player player){
        currentUsers.remove(player);
        return String.format(SIGN_OUT, player.getName());
    }

    public void newGame(Player enemy, Player you){
        GameView gameView = new GameView(enemy, you, GameView.Mode.PLAY);
        gameViews.add(gameView);
        this.games.put(gameView.getGameID(), new BoardView());

    }

    public HashMap getGames(){
        return this.games;
    }

    public GameView getGame(int gameID){
        for (GameView x:gameViews
             ) {
            if(x.getGameID() == gameID){
                return x;
            }
        }
        return null;
    }


    public void whereAmI(String file){
        LOG.fine(file);
    }
}
